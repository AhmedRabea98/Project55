// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WePayOffer.DAL.Database;

#nullable disable

namespace WePayOffer.DAL.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20221101164357_initialMigration")]
    partial class initialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("WePayOffer.DAL.Entity.ServiceNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OfferId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("ServiceNumber");
                });

            modelBuilder.Entity("WePayOffer.DAL.Entity.ServiceTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FunctionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSucceed")
                        .HasColumnType("bit");

                    b.Property<string>("RequestId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponseMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceNumberId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceNumberId");

                    b.ToTable("ServiceTransaction");
                });

            modelBuilder.Entity("WePayOffer.DAL.Entity.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "New"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Succeed"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Failed"
                        },
                        new
                        {
                            Id = 4,
                            Name = "In Progress"
                        });
                });

            modelBuilder.Entity("WePayOffer.DAL.Entity.ServiceNumber", b =>
                {
                    b.HasOne("WePayOffer.DAL.Entity.Status", "Status")
                        .WithMany("ServiceNumber")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("WePayOffer.DAL.Entity.ServiceTransaction", b =>
                {
                    b.HasOne("WePayOffer.DAL.Entity.ServiceNumber", "ServiceNumber")
                        .WithMany()
                        .HasForeignKey("ServiceNumberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceNumber");
                });

            modelBuilder.Entity("WePayOffer.DAL.Entity.Status", b =>
                {
                    b.Navigation("ServiceNumber");
                });
#pragma warning restore 612, 618
        }
    }
}
